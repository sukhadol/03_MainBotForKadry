import asyncio

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils.executor import start_webhook


import os
BOT_TOKEN = os.getenv('TOKEN') 
HEROKU_APP_NAME = os.getenv('HEROKU_APP_NAME') 

# webhook settings
WEBHOOK_HOST = f'https://{HEROKU_APP_NAME}.herokuapp.com'
WEBHOOK_PATH = f'/webhook/{BOT_TOKEN}' 
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# webserver settings
WEBAPP_HOST = '0.0.0.0'
WEBAPP_PORT = int(os.environ.get('PORT', '8443')) # —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –∫–∞–∂–¥—ã–π —Ä–∞–∑ –±–µ—Ä–µ—Ç –∫–∞–∫–æ–π-—Ç–æ –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è, –≤—Å–µ –≤—Ä–µ–º—è —Ä–∞–∑–Ω—ã–µ

loop = asyncio.get_event_loop()
bot = Bot(token=BOT_TOKEN, loop=loop)
dp = Dispatcher(bot)

# #–ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä —Å–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
# @dp.message_handler()
# async def echo(message: types.Message):
#     await bot.send_message(message.chat.id, message.text)


#===== –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤
help_message = text("–∑–¥–µ—Å—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–ª–∞-–±–ª–∞-–±–ª–∞, –ø–æ–∫–∞ —É–¥–∞–ª–µ–Ω–æ, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –±–æ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
@dp.message_handler(lambda message: message.text == btn_help)
@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply(help_message, disable_web_page_preview = True)

tmp_message = text("–∑–¥–µ—Å—å –ø–æ—Ç–æ–º –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
@dp.message_handler(lambda message: message.text == btn_zapusk)
@dp.message_handler(commands=['zapusk'])
async def process_help_command(message: types.Message):
    await message.reply(tmp_message, disable_web_page_preview = True)


#===== –±–ª–æ–∫ –ù–∞—á–∞–ª–∞
btn_zapusk = '–ó–∞–ø—É—Å–∫'
btn_help = '–ü–æ–º–æ—â—å'
MAIN_KB = ReplyKeyboardMarkup(
                             resize_keyboard=True).row(
                             KeyboardButton(btn_zapusk),
                             KeyboardButton(btn_help)
                             )

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    if ((message.from_user.first_name is None) and (message.from_user.first_name is None)):
        whom_say = message.from_user.username
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç, @{message.from_user.username}!\n –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É üëã', reply_markup=MAIN_KB)
    else:
        whom_say = message.from_user.first_name + ' ' + message.from_user.last_name
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {whom_say} (@{message.from_user.username})!\n–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É üëã', reply_markup=MAIN_KB)



async def on_startup(dp):
    await bot.delete_webhook(dp) 
    await bot.set_webhook(WEBHOOK_URL)
    # –∏ –¥–∞–ª—å—à–µ –≤—Å–µ —á—Ç–æ –Ω–∞–¥–æ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞


async def on_shutdown(dp):
    # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–∞–¥–æ –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    pass


if __name__ == '__main__':
    start_webhook(dispatcher=dp, webhook_path=WEBHOOK_PATH, on_startup=on_startup, on_shutdown=on_shutdown,
                  skip_updates=True, host=WEBAPP_HOST, port=WEBAPP_PORT)